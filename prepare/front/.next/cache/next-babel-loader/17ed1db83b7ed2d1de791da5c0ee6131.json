{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { HYDRATE } from \"next-redux-wrapper\";\n\n// 기본 State\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginDate: {}\n  },\n  posts: {\n    mainPosts: []\n  }\n};\nexport const loginAction = data => {\n  return {\n    type: \"LOG_IN\",\n    data\n  };\n};\nexport const logoutAction = () => {\n  // 로그아웃은 데이터 필요없음\n  return {\n    type: \"LOG_OUT\"\n  };\n};\n\n// (이전상태, 액션) => 다음상태 (2개를 1개로 축소)\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      console.log(\"HYDRATE\", action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n    case \"LOG_IN\":\n      // 로그인\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          // 로그인 되면 true로 바꿔주기\n          user: action.data\n        })\n      });\n    case \"LOG_OUT\":\n      // 로그인\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          // 로그인 되면 true로 바꿔주기\n          user: null\n        })\n      });\n  }\n};\n\n// async action creator (비동기)\n// action creator\nconst changeNickname = data => {\n  // 데이터가 여러번 바뀔 수 있으니 동적으로 data로 받아오기\n  return {\n    type: \"CHANGE_NICKNAME\",\n    data\n  };\n};\n\n// 수정할 데이터만 함수에 넣으면 매번 action 생성할 필요가 없이 자동 생성\nchangeNickname(\"boogicho\");\n\n// {\n//   type: \"CHANGE_NICKNAME\",\n//   data: 'boogicho',\n// };\n\nstore.dispatch(changeNickname(\"mighty tak\"));\nexport default rootReducer;","map":{"version":3,"names":["HYDRATE","initialState","user","isLoggedIn","signUpData","loginDate","posts","mainPosts","loginAction","data","type","logoutAction","rootReducer","state","action","console","log","payload","changeNickname","store","dispatch"],"sources":["/Users/chae/Desktop/강의/제로초/[리뉴얼] React로 NodeBird SNS 만들기/react-nodebird-practice/prepare/front/reducers/index.js"],"sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\n\n// 기본 State\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginDate: {},\n  },\n\n  posts: {\n    mainPosts: [],\n  },\n};\n\nexport const loginAction = (data) => {\n  return {\n    type: \"LOG_IN\",\n    data,\n  };\n};\n\nexport const logoutAction = () => {\n  // 로그아웃은 데이터 필요없음\n  return {\n    type: \"LOG_OUT\",\n  };\n};\n\n// (이전상태, 액션) => 다음상태 (2개를 1개로 축소)\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      console.log(\"HYDRATE\", action);\n      return { ...state, ...action.payload };\n    case \"LOG_IN\": // 로그인\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          isLoggedIn: true, // 로그인 되면 true로 바꿔주기\n          user: action.data,\n        },\n      };\n\n    case \"LOG_OUT\": // 로그인\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          isLoggedIn: false, // 로그인 되면 true로 바꿔주기\n          user: null,\n        },\n      };\n  }\n};\n\n// async action creator (비동기)\n// action creator\nconst changeNickname = (data) => {\n  // 데이터가 여러번 바뀔 수 있으니 동적으로 data로 받아오기\n  return {\n    type: \"CHANGE_NICKNAME\",\n    data,\n  };\n};\n\n// 수정할 데이터만 함수에 넣으면 매번 action 생성할 필요가 없이 자동 생성\nchangeNickname(\"boogicho\");\n\n// {\n//   type: \"CHANGE_NICKNAME\",\n//   data: 'boogicho',\n// };\n\nstore.dispatch(changeNickname(\"mighty tak\"));\n\nexport default rootReducer;\n"],"mappings":";;;;;AAAA,SAASA,OAAO,QAAQ,oBAAoB;;AAE5C;AACA,MAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE;IACJC,UAAU,EAAE,KAAK;IACjBD,IAAI,EAAE,IAAI;IACVE,UAAU,EAAE,CAAC,CAAC;IACdC,SAAS,EAAE,CAAC;EACd,CAAC;EAEDC,KAAK,EAAE;IACLC,SAAS,EAAE;EACb;AACF,CAAC;AAED,OAAO,MAAMC,WAAW,GAAIC,IAAI,IAAK;EACnC,OAAO;IACLC,IAAI,EAAE,QAAQ;IACdD;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,MAAM;EAChC;EACA,OAAO;IACLD,IAAI,EAAE;EACR,CAAC;AACH,CAAC;;AAED;AACA,MAAME,WAAW,GAAG,CAACC,KAAK,GAAGZ,YAAY,EAAEa,MAAM,KAAK;EACpD,QAAQA,MAAM,CAACJ,IAAI;IACjB,KAAKV,OAAO;MACVe,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEF,MAAM,CAAC;MAC9B,uCAAYD,KAAK,GAAKC,MAAM,CAACG,OAAO;IACtC,KAAK,QAAQ;MAAE;MACb,uCACKJ,KAAK;QACRX,IAAI,kCACCW,KAAK,CAACX,IAAI;UACbC,UAAU,EAAE,IAAI;UAAE;UAClBD,IAAI,EAAEY,MAAM,CAACL;QAAI;MAClB;IAGL,KAAK,SAAS;MAAE;MACd,uCACKI,KAAK;QACRX,IAAI,kCACCW,KAAK,CAACX,IAAI;UACbC,UAAU,EAAE,KAAK;UAAE;UACnBD,IAAI,EAAE;QAAI;MACX;EACD;AAER,CAAC;;AAED;AACA;AACA,MAAMgB,cAAc,GAAIT,IAAI,IAAK;EAC/B;EACA,OAAO;IACLC,IAAI,EAAE,iBAAiB;IACvBD;EACF,CAAC;AACH,CAAC;;AAED;AACAS,cAAc,CAAC,UAAU,CAAC;;AAE1B;AACA;AACA;AACA;;AAEAC,KAAK,CAACC,QAAQ,CAACF,cAAc,CAAC,YAAY,CAAC,CAAC;AAE5C,eAAeN,WAAW"},"metadata":{},"sourceType":"module"}