{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport user from \"./user\"; // reducer\nimport post from \"./post\"; // reducer\nimport { combineReducers } from \"redux\"; // reducer합쳐주는 메셔드\n\n// combineReducers => user reducer와 post reducer 합쳐주는 메셔드\nvar rootReducer = combineReducers({\n  index: function index() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n    // 리덕스 서버사이드 렌더링\n    switch (action.type) {\n      case HYDRATE:\n        console.log(\"HYDRATE\", action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n      default:\n        return state;\n    }\n  },\n  user: user,\n  // user reducer\n  post: post //  post reducer\n});\n\n// async action creator (비동기)\n// action creator\nvar changeNickname = function changeNickname(data) {\n  // 데이터가 여러번 바뀔 수 있으니 동적으로 data로 받아오기\n  return {\n    type: \"CHANGE_NICKNAME\",\n    data: data\n  };\n};\n\n// 수정할 데이터만 함수에 넣으면 매번 action 생성할 필요가 없이 자동 생성\nchangeNickname(\"boogicho\");\n\n// {\n//   type: \"CHANGE_NICKNAME\",\n//   data: 'boogicho',\n// };\n\n// store.dispatch(changeNickname(\"mighty tak\"));\n\nexport default rootReducer;","map":{"version":3,"names":["HYDRATE","user","post","combineReducers","rootReducer","index","state","action","type","console","log","payload","changeNickname","data"],"sources":["/Users/chae/Desktop/강의/제로초/[리뉴얼] React로 NodeBird SNS 만들기/react-nodebird-practice/prepare/front/reducers/index.js"],"sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\nimport user from \"./user\"; // reducer\nimport post from \"./post\"; // reducer\nimport { combineReducers } from \"redux\"; // reducer합쳐주는 메셔드\n\n\n  // combineReducers => user reducer와 post reducer 합쳐주는 메셔드\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    // 리덕스 서버사이드 렌더링\n    switch (action.type) {\n      case HYDRATE:\n        console.log(\"HYDRATE\", action);\n        return { ...state, ...action.payload };\n      default:\n        return state;\n    }\n  },\n  user, // user reducer\n  post, //  post reducer\n});\n\n// async action creator (비동기)\n// action creator\nconst changeNickname = (data) => {\n  // 데이터가 여러번 바뀔 수 있으니 동적으로 data로 받아오기\n  return {\n    type: \"CHANGE_NICKNAME\",\n    data,\n  };\n};\n\n// 수정할 데이터만 함수에 넣으면 매번 action 생성할 필요가 없이 자동 생성\nchangeNickname(\"boogicho\");\n\n// {\n//   type: \"CHANGE_NICKNAME\",\n//   data: 'boogicho',\n// };\n\n// store.dispatch(changeNickname(\"mighty tak\"));\n\nexport default rootReducer;\n"],"mappings":";;;AAAA,SAASA,OAAO,QAAQ,oBAAoB;AAC5C,OAAOC,IAAI,MAAM,QAAQ,CAAC,CAAC;AAC3B,OAAOC,IAAI,MAAM,QAAQ,CAAC,CAAC;AAC3B,SAASC,eAAe,QAAQ,OAAO,CAAC,CAAC;;AAGvC;AACF,IAAMC,WAAW,GAAGD,eAAe,CAAC;EAClCE,KAAK,EAAE,iBAAwB;IAAA,IAAvBC,KAAK,uEAAG,CAAC,CAAC;IAAA,IAAEC,MAAM;IACxB;IACA,QAAQA,MAAM,CAACC,IAAI;MACjB,KAAKR,OAAO;QACVS,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEH,MAAM,CAAC;QAC9B,uCAAYD,KAAK,GAAKC,MAAM,CAACI,OAAO;MACtC;QACE,OAAOL,KAAK;IAAC;EAEnB,CAAC;EACDL,IAAI,EAAJA,IAAI;EAAE;EACNC,IAAI,EAAJA,IAAI,CAAE;AACR,CAAC,CAAC;;AAEF;AACA;AACA,IAAMU,cAAc,GAAG,SAAjBA,cAAc,CAAIC,IAAI,EAAK;EAC/B;EACA,OAAO;IACLL,IAAI,EAAE,iBAAiB;IACvBK,IAAI,EAAJA;EACF,CAAC;AACH,CAAC;;AAED;AACAD,cAAc,CAAC,UAAU,CAAC;;AAE1B;AACA;AACA;AACA;;AAEA;;AAEA,eAAeR,WAAW"},"metadata":{},"sourceType":"module"}